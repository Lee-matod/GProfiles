import "../assets/fonts/ArchivoBlack/ArchivoBlack-Regular.ttf";
import "../assets/fonts/Roboto/Roboto-Regular.ttf";

import { Title, EditableField, FieldContentType, PrettyButton } from "text.slint";
import { SlintAttribution } from "components.slint";
import { Game, GameType, GameView, GameContainer } from "objects/games.slint";
import { Process, ProcessContainer } from "objects/processes.slint";
import { Keybind, Remapper } from "objects/keymapper.slint";

export component AppWindow inherits Window {
    callback application-clicked(Game);
    callback restart-ghub();

    callback from-executable();
    callback from-process(Process);

    callback name-edit();
    callback image-edit();
    callback executable-edit();
    callback forget-application();

    callback new-key();
    callback set-pointer(Keybind);
    callback set-object(Keybind);
    callback delete-key(Keybind);

    in-out property <[Keybind]> keybinds;
    in-out property <[Process]> processes;
    in-out property <[Game]> applications;
    in-out property <Game> active-application: applications[0];
    in-out property <string> active-application-name: "Desktop";
    in-out property <string> active-application-image: "";
    in-out property <string> active-application-executable: "";
    in-out property <GameType> active-application-type: GameType.desktop;
    out property <string> process-query;

    width: 960px;
    height: 540px;
    title: "GProfiles";
    icon: @image-url("../assets/app.ico");
    background: #000000;

    scope := FocusScope { }

    TouchArea {
        clicked => {
            scope.focus();
        }
    }

    Title {
        x: 50px;
        y: 20px;
        text: "ADD APPLICATION";
    }

    Title {
        x: 500px;
        y: 20px;
        text: "GAME PROFILES";
    }

    Title {
        x: 15px;
        y: 275px;
        text: "DETECTED APPLICATIONS";
    }

    ProcessContainer {
        x: -360px;
        y: 300px;
        processes: processes;
        query <=> process-query;
        add-process(process) => {
            root.from-process(process)
        }
    }

    GameView {
        y: 50px;
        x: 50px;

        application: { name: "NEW", icon: @image-url("../assets/material_icons/add.png") };
        active: active-application;
        image-override: #ffffff;

        TouchArea {
            clicked => {
                root.from-executable();
            }
        }
    }

    GameContainer {
        x: 250px;
        y: 50px;
        active-application: active-application;
        applications: applications;
        clicked(application) => {
            root.application-clicked(application);
        }
    }

    Rectangle {
        x: 240px;
        y: 280px;
        width: 710px;
        height: 250px;

        background: #3b3b3b;
        border-radius: 5px;

        // Slint's Royalty-free license requires me
        // to include this somewhere that can be seen.
        SlintAttribution {
            x: -75px;
            y: 70px;
        }

        PrettyButton {
            x: 20px;
            y: 205px;
            text: "FORGET";
            icon: @image-url("../assets/material_icons/delete.png");
            hover: #ff2e2e;
            default: #e00d00;
            clicked => {
                root.forget-application();
            }
        }

        PrettyButton {
            x: 500px;
            y: 205px;
            width: 190px;
            text: "RESTART LGHUB";
            icon: @image-url("../assets/material_icons/refresh.png");
            hover: #999999;
            default: #666666;
            clicked => {
                root.restart-ghub();
            }
        }

        EditableField {
            x: 20px;
            y: 25px;
            title: "PROFILE NAME";
            content <=> active-application-name;
            content-type: active-application.type == GameType.desktop || active-application.type == GameType.installed ? FieldContentType.interactable : FieldContentType.editable;
            icon: active-application.type == GameType.custom ? @image-url("../assets/material_icons/save.png") : @image-url("");
            clicked => {
                root.name-edit();
            }
        }

        EditableField {
            x: 20px;
            y: 85px;
            title: "IMAGE PATH";
            content: active-application-image;
            content-type: active-application.type == GameType.custom ? FieldContentType.interactable : FieldContentType.viewable;
            icon: active-application.type == GameType.custom ? @image-url("../assets/material_icons/edit.png") : @image-url("");
            clicked => {
                root.image-edit();
            }
        }

        EditableField {
            x: 20px;
            y: 145px;
            title: "EXECUTABLE PATH";
            content: active-application-executable;
            content-type: active-application.type == GameType.desktop ? FieldContentType.viewable : FieldContentType.interactable;
            icon: active-application.type == GameType.custom ? @image-url("../assets/material_icons/edit.png") : @image-url("");
            clicked => {
                root.executable-edit();
            }
        }

        Title {
            x: 440px;
            y: 25px;
            text: "KEY REMAPPER";
        }

        Remapper {
            x: 435px;
            y: 45px;
            keybinds: keybinds;

            new-key() => {
                root.new-key();
            }
            set-pointer(keybind) => {
                root.set-pointer(keybind);
            }
            set-object(keybind) => {
                root.set-object(keybind);
            }
            delete-key(keybind) => {
                root.delete-key(keybind);
            }
        }
    }
}
