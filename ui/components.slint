import { Dimensions, Color } from "objects.slint";
import { LineEdit } from "std-widgets.slint";

export enum FieldInputType { editable, selectable, readable}

export component CollapsableContainer inherits Rectangle {
    in property <string> name;
    in-out property <bool> is-collapsed: true;

    TouchArea {
        clicked => {
            root.is-collapsed = !root.is-collapsed;
        }
    }

    image := Image {
        x: Dimensions.small;
        width: Dimensions.large;
        height: Dimensions.large;
        colorize: Color.secondary;
        source: @image-url("../assets/arrow.png");
        rotation-angle: root.is-collapsed ? 0 : 90deg;

        animate rotation-angle {
             duration: 150ms;
        }
    }

    text := Text {
        x: image.x + image.width + Dimensions.small;
        text: name;
        color: Color.secondary;
        font-weight: Dimensions.font-bold;
    }

    Rectangle {
        x: text.x + text.width + Dimensions.small;
        width: parent.width - self.x - Dimensions.large;
        height: Dimensions.small;
        background: Color.secondary;
        border-radius: Dimensions.medium;
    }
}

export component HoverableComponent inherits Rectangle {
    callback clicked();

    in property <color> hover;
    in property <color> default;
    in property <duration> duration: 150ms;

    animate background { duration: duration; }

    background: area.has-hover ? hover : default;
    area := TouchArea {
        clicked => {
            root.clicked()
        }
    }
}

export component Title inherits Text {
    color: Color.brand;
    font-size: Dimensions.font-title;
    font-weight: Dimensions.font-bold;
    horizontal-alignment: center;
}

export component Field inherits Rectangle {
    in property <string> name;
    in property <string> placeholder;
    in property <FieldInputType> input-type;
    in-out property <string> value;

    height: title.height + field.height;

    title := Title {
        x: 0;
        y: 0;
        text: name;
    }

    field := LineEdit {
        x: 0;
        y: title.height;
        width: parent.width;
        text <=> value;
        placeholder-text: root.placeholder;
        read-only: input-type == FieldInputType.selectable;
        enabled: input-type != FieldInputType.readable;
    }
}
